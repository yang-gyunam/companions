{
  "dictionary": [
    {
      "id": 1,
      "term": "API",
      "fullName": "Application Programming Interface",
      "definition": "서로 다른 소프트웨어 응용 프로그램들이 상호 작용할 수 있도록 하는 인터페이스입니다.",
      "category": "Development",
      "examples": [
        "RESTful API를 통해 클라이언트와 서버가 데이터를 주고받습니다.",
        "OAuth API를 사용하여 소셜 로그인을 구현했습니다."
      ],
      "relatedTerms": ["REST", "GraphQL", "Endpoint", "SDK"],
      "tags": ["Backend", "Integration", "Protocol"]
    },
    {
      "id": 2,
      "term": "CI/CD",
      "fullName": "Continuous Integration / Continuous Deployment",
      "definition": "지속적 통합과 지속적 배포를 의미하며, 코드 변경사항을 자동으로 빌드, 테스트, 배포하는 개발 방법론입니다.",
      "category": "DevOps",
      "examples": [
        "GitHub Actions를 통해 CI/CD 파이프라인을 구축했습니다.",
        "코드 커밋 시 자동으로 테스트가 실행되고 통과하면 배포됩니다."
      ],
      "relatedTerms": ["DevOps", "Pipeline", "Automation", "Testing"],
      "tags": ["Automation", "Deployment", "Testing"]
    },
    {
      "id": 3,
      "term": "JWT",
      "fullName": "JSON Web Token",
      "definition": "JSON 객체를 사용하여 정보를 안전하게 전송하기 위한 개방형 표준으로, 주로 인증과 정보 교환에 사용됩니다.",
      "category": "Security",
      "examples": [
        "로그인 시 JWT 토큰을 발급하여 사용자 인증을 관리합니다.",
        "JWT의 페이로드에는 사용자 ID와 권한 정보가 포함됩니다."
      ],
      "relatedTerms": ["OAuth", "Authentication", "Token", "Security"],
      "tags": ["Security", "Authentication", "Token"]
    },
    {
      "id": 4,
      "term": "MVP",
      "fullName": "Minimum Viable Product",
      "definition": "고객에게 가치를 제공할 수 있는 최소한의 기능을 가진 제품으로, 빠른 시장 진입과 피드백 수집을 목적으로 합니다.",
      "category": "Product Management",
      "examples": [
        "기본적인 로그인과 게시글 작성 기능만으로 MVP를 출시했습니다.",
        "MVP 출시 후 사용자 피드백을 바탕으로 기능을 점진적으로 확장합니다."
      ],
      "relatedTerms": ["Agile", "Product Strategy", "User Feedback", "Iteration"],
      "tags": ["Product", "Strategy", "Development"]
    },
    {
      "id": 5,
      "term": "REST",
      "fullName": "Representational State Transfer",
      "definition": "웹 서비스 설계를 위한 아키텍처 스타일로, HTTP 메서드를 사용하여 자원을 조작하는 방식입니다.",
      "category": "Architecture",
      "examples": [
        "GET /api/users로 사용자 목록을 조회합니다.",
        "POST /api/users로 새로운 사용자를 생성합니다."
      ],
      "relatedTerms": ["API", "HTTP", "CRUD", "Stateless"],
      "tags": ["Architecture", "API", "Web Service"]
    },
    {
      "id": 6,
      "term": "Agile",
      "fullName": "Agile Software Development",
      "definition": "빠른 반복과 지속적인 피드백을 통해 소프트웨어를 개발하는 방법론으로, 변화에 유연하게 대응할 수 있습니다.",
      "category": "Methodology",
      "examples": [
        "2주 스프린트로 기능을 개발하고 데모를 진행합니다.",
        "매일 스탠드업 미팅으로 진행 상황을 공유합니다."
      ],
      "relatedTerms": ["Scrum", "Sprint", "Retrospective", "User Story"],
      "tags": ["Methodology", "Project Management", "Team Work"]
    },
    {
      "id": 7,
      "term": "Docker",
      "fullName": "Docker Container Platform",
      "definition": "애플리케이션을 컨테이너라는 가상화된 환경에서 실행할 수 있게 해주는 플랫폼입니다.",
      "category": "DevOps",
      "examples": [
        "Dockerfile을 작성하여 애플리케이션 환경을 코드로 관리합니다.",
        "개발, 테스트, 운영 환경의 일관성을 보장합니다."
      ],
      "relatedTerms": ["Container", "Kubernetes", "Microservices", "DevOps"],
      "tags": ["Containerization", "DevOps", "Infrastructure"]
    },
    {
      "id": 8,
      "term": "GraphQL",
      "fullName": "Graph Query Language",
      "definition": "API를 위한 쿼리 언어로, 클라이언트가 필요한 데이터만 정확히 요청할 수 있게 해줍니다.",
      "category": "Development",
      "examples": [
        "단일 요청으로 여러 리소스의 데이터를 가져올 수 있습니다.",
        "클라이언트가 필요한 필드만 선택하여 받을 수 있습니다."
      ],
      "relatedTerms": ["API", "Query", "Schema", "Resolver"],
      "tags": ["API", "Query Language", "Data Fetching"]
    },
    {
      "id": 9,
      "term": "Kubernetes",
      "fullName": "Kubernetes Container Orchestration",
      "definition": "컨테이너화된 애플리케이션의 배포, 스케일링, 관리를 자동화하는 오픈소스 플랫폼입니다.",
      "category": "DevOps",
      "examples": [
        "트래픽 증가 시 자동으로 팟(Pod)의 수를 늘립니다.",
        "서비스 장애 시 자동으로 복구합니다."
      ],
      "relatedTerms": ["Docker", "Container", "Orchestration", "Pod"],
      "tags": ["Container Orchestration", "DevOps", "Cloud"]
    },
    {
      "id": 10,
      "term": "UI/UX",
      "fullName": "User Interface / User Experience",
      "definition": "사용자 인터페이스와 사용자 경험을 의미하며, 제품의 사용성과 만족도를 결정하는 중요한 요소입니다.",
      "category": "Design",
      "examples": [
        "직관적인 UI로 사용자가 쉽게 기능을 찾을 수 있습니다.",
        "UX 리서치를 통해 사용자의 니즈를 파악했습니다."
      ],
      "relatedTerms": ["Design", "Usability", "Accessibility", "Prototype"],
      "tags": ["Design", "User Experience", "Interface"]
    },
    {
      "id": 11,
      "term": "Microservices",
      "fullName": "Microservices Architecture",
      "definition": "애플리케이션을 작고 독립적인 서비스들로 분할하여 개발하고 배포하는 아키텍처 패턴입니다.",
      "category": "Architecture",
      "examples": [
        "사용자 서비스, 주문 서비스, 결제 서비스를 독립적으로 운영합니다.",
        "각 서비스는 독립적으로 스케일링할 수 있습니다."
      ],
      "relatedTerms": ["API Gateway", "Service Mesh", "Container", "DevOps"],
      "tags": ["Architecture", "Scalability", "Distributed Systems"]
    },
    {
      "id": 12,
      "term": "OAuth",
      "fullName": "Open Authorization",
      "definition": "사용자가 비밀번호를 공유하지 않고도 다른 애플리케이션에 자신의 정보에 대한 접근 권한을 부여할 수 있는 개방형 표준입니다.",
      "category": "Security",
      "examples": [
        "Google 계정으로 다른 서비스에 로그인할 수 있습니다.",
        "사용자 동의 하에 제한된 권한만 부여됩니다."
      ],
      "relatedTerms": ["JWT", "Authentication", "Authorization", "Security"],
      "tags": ["Security", "Authentication", "Authorization"]
    }
  ]
}